import android.content.Context;
import android.graphics.Color;
import android.location.Criteria;
import android.location.GpsStatus;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.location.LocationProvider;

	/************************************************
	 * 
	 * 		GPS部份
	 * 
	 ***********************************************/
	/**
	 * GPS初始化，取得可用的位置提供器
	 * @return
	 */
	private boolean initLocationProvider() {
		locationMgr = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
		
		//1.選擇最佳提供器
//		Criteria criteria = new Criteria();
//		criteria.setAccuracy(Criteria.ACCURACY_FINE);
//		criteria.setAltitudeRequired(false);
//		criteria.setBearingRequired(false);
//		criteria.setCostAllowed(true);
//		criteria.setPowerRequirement(Criteria.POWER_LOW);
//		
//		provider = locationMgr.getBestProvider(criteria, true);
//		
//		if (provider != null) {
//			return true;
//		}
		
		
		
		//2.選擇使用GPS提供器
		if (locationMgr.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
			provider = LocationManager.GPS_PROVIDER;
			return true;
		}
		
		
		
		//3.選擇使用網路提供器
//		if (locationMgr.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {
//			provider = LocationManager.NETWORK_PROVIDER;
//			return true;
//		}
		
		return false;
	}
	
	/**
	 * 執行"我"在哪裡
	 * 1.建立位置改變偵聽器
	 * 2.預先顯示上次的已知位置
	 */
	private void whereAmI(){
//		String provider = LocationManager.GPS_PROVIDER;
		
		//取得上次已知的位置
		Location location = locationMgr.getLastKnownLocation(provider);
		updateWithNewLocation(location);
		
		//GPS Listener
		locationMgr.addGpsStatusListener(gpsListener);
		
		
		//Location Listener
		long minTime = 5000;//ms
		float minDist = 5.0f;//meter
		locationMgr.requestLocationUpdates(provider, minTime, minDist, locationListener);
	}
	
	
	/**
	 * 更新並顯示新位置
	 * @param location
	 */
	private void updateWithNewLocation(Location location) {
		String where = "";
		if (location != null) {
			//經度
			double lng = location.getLongitude();
			//緯度
			double lat = location.getLatitude();
			//速度
			float speed = location.getSpeed();
			//時間
			long time = location.getTime();
			String timeString = getTimeString(time);
			
			where = "經度: " + lng + 
					"\n緯度: " + lat + 
					"\n速度: " + speed + 
					"\n時間: " + timeString +
					"\nProvider: " + provider;
			
			//標記"我"
			showMarkerMe(lat, lng);
			cameraFocusOnMe(lat, lng);
			trackToMe(lat, lng);
			
			//移動攝影機跟著"我"
//			CameraPosition cameraPosition = new CameraPosition.Builder()
//		    .target(new LatLng(lat, lng))      		// Sets the center of the map to ZINTUN
//		    .zoom(13)                   // Sets the zoom
//		    .bearing(90)                // Sets the orientation of the camera to east
//		    .tilt(30)                   // Sets the tilt of the camera to 30 degrees
//		    .build();                   // Creates a CameraPosition from the builder
//			mMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));
			
//			CameraPosition camPosition = new CameraPosition.Builder()
//											.target(new LatLng(lat, lng))
//											.zoom(16)
//											.build();
//
//			mMap.animateCamera(CameraUpdateFactory.newCameraPosition(camPosition));
			
		}else{
			where = "No location found.";
		}
		
		//位置改變顯示
		txtOutput.setText(where);
	}
	
	
	GpsStatus.Listener gpsListener = new GpsStatus.Listener() {
		
		@Override
		public void onGpsStatusChanged(int event) {
			switch (event) {
	        case GpsStatus.GPS_EVENT_STARTED:
	        	Log.d(TAG, "GPS_EVENT_STARTED");
	        	Toast.makeText(MainActivity.this, "GPS_EVENT_STARTED", Toast.LENGTH_SHORT).show();
	            break;

	        case GpsStatus.GPS_EVENT_STOPPED:
	        	Log.d(TAG, "GPS_EVENT_STOPPED");
	        	Toast.makeText(MainActivity.this, "GPS_EVENT_STOPPED", Toast.LENGTH_SHORT).show();
	            break;

	        case GpsStatus.GPS_EVENT_FIRST_FIX:
	        	Log.d(TAG, "GPS_EVENT_FIRST_FIX");
	        	Toast.makeText(MainActivity.this, "GPS_EVENT_FIRST_FIX", Toast.LENGTH_SHORT).show();
	            break;

	        case GpsStatus.GPS_EVENT_SATELLITE_STATUS:
	        	Log.d(TAG, "GPS_EVENT_SATELLITE_STATUS");
	            break;
			}
		}
	};
	
	
	LocationListener locationListener = new LocationListener(){

		@Override
		public void onLocationChanged(Location location) {
			updateWithNewLocation(location);
		}

		@Override
		public void onProviderDisabled(String provider) {
			updateWithNewLocation(null);
		}

		@Override
		public void onProviderEnabled(String provider) {
			
		}

		@Override
		public void onStatusChanged(String provider, int status, Bundle extras) {
			switch (status) {
		    case LocationProvider.OUT_OF_SERVICE:
		        Log.v(TAG, "Status Changed: Out of Service");
		        Toast.makeText(MainActivity.this, "Status Changed: Out of Service",
		                Toast.LENGTH_SHORT).show();
		        break;
		    case LocationProvider.TEMPORARILY_UNAVAILABLE:
		        Log.v(TAG, "Status Changed: Temporarily Unavailable");
		        Toast.makeText(MainActivity.this, "Status Changed: Temporarily Unavailable",
		                Toast.LENGTH_SHORT).show();
		        break;
		    case LocationProvider.AVAILABLE:
		        Log.v(TAG, "Status Changed: Available");
		        Toast.makeText(MainActivity.this, "Status Changed: Available",
		                Toast.LENGTH_SHORT).show();
		        break;
		    }
		}
		
	};
	
	private String getTimeString(long timeInMilliseconds){
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		return format.format(timeInMilliseconds);
	}
	